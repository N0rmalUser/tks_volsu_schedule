# TKS VOLSU SCHEDULE BOT
# Copyright (C) 2024 N0rmalUser
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import logging
from datetime import datetime

import pytz
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.markups import admin
from app.misc.states import BroadcastStates

from . import schedule_parser, sheets_maker, states, text_maker, user_activity
from ..config import TIMEZONE, NUMERATOR


def get_today() -> tuple[int, int]:
    """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏"""

    day = int(f"{datetime.now(pytz.timezone(TIMEZONE)).weekday() + 1}")
    week_int = 2 if NUMERATOR == 0 else 1
    week = (
        week_int
        if datetime.now(pytz.timezone(TIMEZONE)).isocalendar()[1] % 2 == 0
        else 3 - week_int
    )
    if day == 7:
        return 1, week + 1 if week == 1 else week - 1

    else:
        return day, week


def time_to_minutes(time_str: str) -> int:
    """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""

    hours, minutes = map(int, time_str.split(":"))
    return hours * 60 + minutes


def get_time_symbol(start_time: str) -> str:
    """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—Ä–µ–º–µ–Ω–∏"""

    hour = int(start_time.split(":")[0])
    if 8 <= hour < 10:
        return "üï£ "
    elif 10 <= hour < 12:
        return "üïô "
    elif 12 <= hour < 13:
        return "üïõ "
    elif 13 <= hour < 14:
        return "üïú "
    elif 14 <= hour < 16:
        return "üïû "
    elif 16 <= hour < 18:
        return "üïî "
    elif 18 <= hour < 20:
        return "üï° "
    else:
        return "üïô "


def get_lesson_label(subject: str) -> str:
    """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞—Ä—ã –ø–æ –µ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é"""

    if "–ø—Ä" in subject.lower():
        return "–ü—Ä–∞–∫—Ç–∏–∫–∞"
    elif "–ø—Ä." in subject.lower():
        return "–ü—Ä–∞–∫—Ç–∏–∫–∞"
    elif "–ª–∞–±" in subject.lower():
        return "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ"
    elif "–ª–∞–±." in subject.lower():
        return "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ"
    elif "–ª" in subject.lower():
        return "–õ–µ–∫—Ü–∏—è"
    elif "–ª." in subject.lower():
        return "–õ–µ–∫—Ü–∏—è"
    elif ("–∫—É—Ä—Å" or "–∫—É—Ä/–ø—Ä–æ–µ–∫—Ç" or "–∫—É—Ä/–ø—Ä–æ–µ–∫.") in subject.lower():
        return "–ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç"
    else:
        return ""


def create_progress_bar(completed: int, total: int) -> str:
    total_blocks = 20
    filled_blocks = int((completed / total) * total_blocks)
    bar = "‚ñ†" * filled_blocks + "‚ñ°" * (total_blocks - filled_blocks)
    return f"[{bar}]"


async def send_broadcast_message(msg: Message, state: FSMContext, message_id: int, user_ids: list[int]):
    from asyncio import sleep
    from app.database.user import User

    user_ids = all_user_ids()
    sent_count = 0
    total_users = len(user_ids)
    try:
        for user_id in user_ids:
            if await state.get_state() == BroadcastStates.cancel_sending.state:
                await msg.edit_text(text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            if not User(user_id).blocked:
                try:
                    await msg.bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=msg.chat.id,
                        message_id=message_id,
                    )
                    sent_count += 1
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                finally:
                    await msg.edit_text(
                        text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {total_users} —Å–æ–æ–±—â–µ–Ω–∏–π\n{create_progress_bar(sent_count, total_users)}",
                        reply_markup=admin.cancel_sending(),
                    )
                    await sleep(1)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        await msg.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except TypeError:
        await msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
